// -------------------------
// Prisma Client + Datasource
// -------------------------
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// -------------------------
// Enums
// -------------------------
enum Role {
  ADMIN
  STAFF
}

enum OrderStatus {
  PENDING
  SCHEDULED
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

enum InvoiceStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

enum CustomerStatus {
  ACTIVE
  INACTIVE
  VIP
}

enum DeliveryStatus {
  SCHEDULED
  OUT_FOR_DELIVERY
  DELIVERED
  FAILED
}

// -------------------------
// Models
// -------------------------
model User {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  email        String   @unique
  passwordHash String
  name         String
  role         Role     @default(ADMIN)

  invoices Invoice[]
  orders   Order[]
}

model Customer {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name     String
  phone    String? @db.VarChar(30)
  email    String? @unique
  address  String?
  city     String? @db.VarChar(120)
  notes    String?
  urduName String? @db.VarChar(255)

  // UI fields
  status      CustomerStatus @default(ACTIVE)
  rating      Int            @default(0)
  creditLimit Decimal        @default(0) @db.Decimal(12, 2)

  orders   Order[]
  invoices Invoice[]

  @@index([name])
  @@index([phone])
  @@index([status])
}

model Supplier {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name    String
  phone   String? @db.VarChar(30)
  email   String?
  address String?
  notes   String?

  products Product[]
}

model Product {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sku         String  @unique
  name        String
  urduName    String? @db.VarChar(255)
  description String?
  brand       String?
  sizeLiters  Decimal @db.Decimal(5, 2)
  type        String
  category    String
  costPrice   Decimal @db.Decimal(12, 2)
  salePrice   Decimal @db.Decimal(12, 2)
  imageUrl    String?

  stock         Int @default(0)
  lowStockLevel Int @default(10)

  supplierId String?
  supplier   Supplier? @relation(fields: [supplierId], references: [id])

  orderItems    OrderItem[]
  inventoryLogs InventoryMovement[]

  @@index([name])
  @@index([category])
}

model Order {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  deliveries Delivery[] @relation("OrderDeliveries")

  orderNumber Int         @default(autoincrement())
  status      OrderStatus @default(PENDING)
  scheduledAt DateTime?
  routeCode   String?

  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])

  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  items   OrderItem[]
  invoice Invoice?
}

model OrderItem {
  id String @id @default(cuid())

  productId String
  product   Product @relation(fields: [productId], references: [id])

  orderId String
  order   Order  @relation(fields: [orderId], references: [id])

  quantity  Int
  unitPrice Decimal @db.Decimal(12, 2)
}

model Invoice {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  invoiceNumber Int      @default(autoincrement())

  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])

  // 1:1 to Order â€” defining side needs unique FK
  orderId String? @unique
  order   Order?  @relation(fields: [orderId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  subtotal   Decimal       @db.Decimal(12, 2)
  tax        Decimal       @default(0) @db.Decimal(12, 2)
  discount   Decimal       @default(0) @db.Decimal(12, 2)
  total      Decimal       @db.Decimal(12, 2)
  paidAmount Decimal?      @db.Decimal(12, 2)
  balance    Decimal       @db.Decimal(12, 2)
  status     InvoiceStatus @default(PENDING)

  pdfUrl  String?
  dueDate DateTime?

  items   InvoiceItem[]
  Payment Payment[]

  @@index([customerId])
  @@index([userId])
}

model InvoiceItem {
  id        String  @id @default(cuid())
  invoiceId String
  invoice   Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  name      String
  qty       Int
  price     Decimal @db.Decimal(12, 2)
  lineTotal Decimal @db.Decimal(12, 2)

  @@index([invoiceId])
}

model InventoryMovement {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  productId String
  product   Product @relation(fields: [productId], references: [id])

  change Int
  reason String
  note   String?
}

model Payment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  amount Decimal @db.Decimal(12, 2)
  method String
  ref    String?

  invoiceId String
  invoice   Invoice @relation(fields: [invoiceId], references: [id])
}

model Driver {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name  String
  phone String? @db.VarChar(30)

  deliveries Delivery[]

  @@index([name])
  @@index([phone])
}

model Delivery {
  id             String         @id @default(cuid())
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  deliveryNumber Int            @default(autoincrement())
  status         DeliveryStatus @default(SCHEDULED)

  scheduledDate DateTime?
  deliveredAt   DateTime?
  notes         String?
  address       String?

  orderId String
  order   Order  @relation("OrderDeliveries", fields: [orderId], references: [id])

  driverId String?
  driver   Driver? @relation(fields: [driverId], references: [id])

  @@index([status])
  @@index([scheduledDate])
  @@index([driverId])
}
